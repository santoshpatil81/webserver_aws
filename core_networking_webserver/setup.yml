---
#====================================================================================================
# Description : Platform Engineering Coding Challenge - Setup core networking and webserver
#====================================================================================================

AWSTemplateFormatVersion: "2010-09-09"
Description: "Platform Engineering Coding Challenge"

# Parameters

Parameters:
  VPCCIDR:
    Description: VPC Network CIDR
    Type: String
    Default: "10.0.0.0/16"
  VPCSubnetMask:
    Description: VPC subnet mask bits (8 is /24)
    Type: Number
    Default: 8
  NumberOfNATGateways:
    Description: How many NAT Gateways should be configured
    Type: String
    Default: "1"
    AllowedValues:
      - "0"
      - "1"
      - "2"
      - "3"
  VPCFlowLogsS3Bucket:
    Description: Bucket name for Flow Logs
    Default: "vpc-flow-logs-bucket-santosh-619170903429"
    Type: String
  VPCFlowLogsSwitch:
    Description: Variable to control if we should enable VPC Flow Logs
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  VPCFlowLogsLogDestinationType:
    Description: Flow Log Type
    Type: String
    Default: s3
  Environment:
    Description: Which environment the resources will be deployed
    Type: String
    Default: "Dev"
    AllowedValues:
      - "Dev"
      - "Stage"
      - "Prod"
  RemoteAccessCIDR:
    Description: Remote address CIDR
    Type: String
    Default: "0.0.0.0/0"

# Conditions

Conditions:
  IsNATAEnabled:
    !Or [
      !Equals [!Ref NumberOfNATGateways, "1"],
      !Equals [!Ref NumberOfNATGateways, "2"],
      !Equals [!Ref NumberOfNATGateways, "3"],
    ]
  IsNATBEnabled:
    !Or [
      !Equals [!Ref NumberOfNATGateways, "2"],
      !Equals [!Ref NumberOfNATGateways, "3"],
    ]
  IsNATCEnabled: !Equals [!Ref NumberOfNATGateways, "3"]
  IsNATARouteableFromB:
    !And [Condition: IsNATAEnabled, !Not [Condition: IsNATBEnabled]]
  IsNATARouteableFromC:
    !And [Condition: IsNATAEnabled, !Not [Condition: IsNATCEnabled]]
  EnableVPCFlowLogs:
    !And [
      !Not [!Equals [!Ref VPCFlowLogsLogDestinationType, ""]],
      !Equals [!Ref VPCFlowLogsSwitch, "true"],
    ]

# Resources

Resources:
  # Create VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Sub "${VPCCIDR}"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"
        - Key: env
          Value: 'dev'

  # Create NACLs to allow external traffic

  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-nacl"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PermitAnyFromPublic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Sub ${RemoteAccessCIDR}
      Egress: "true"
      NetworkAclId:
        Ref: PublicNACL
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: "100"

  PermitAnyToPublic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Sub ${RemoteAccessCIDR}
      NetworkAclId:
        Ref: PublicNACL
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: "100"

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-nacl"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PermitAnyFromPrivate:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Sub ${RemoteAccessCIDR}
      Egress: "true"
      NetworkAclId:
        Ref: PrivateNACL
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: "100"

  PermitAnyToPrivate:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Sub ${RemoteAccessCIDR}
      NetworkAclId:
        Ref: PrivateNACL
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: "100"

  # Create Public Subnets

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        !Select [0, !Cidr [!Sub "${VPCCIDR}", 12, !Sub "${VPCSubnetMask}"]]
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet-a"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'
  
  PublicSubnetANACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicNACL
      SubnetId:
        Ref: PublicSubnetA

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTableA
      SubnetId:
        Ref: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        !Select [1, !Cidr [!Sub "${VPCCIDR}", 12, !Sub "${VPCSubnetMask}"]]
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet-b"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PublicSubnetBNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicNACL
      SubnetId:
        Ref: PublicSubnetB

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTableB
      SubnetId:
        Ref: PublicSubnetB

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        !Select [2, !Cidr [!Sub "${VPCCIDR}", 12, !Sub "${VPCSubnetMask}"]]
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet-c"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PublicSubnetCNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicNACL
      SubnetId:
        Ref: PublicSubnetC

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTableC
      SubnetId:
        Ref: PublicSubnetC

  # Create Private Subnets

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        !Select [4, !Cidr [!Sub "${VPCCIDR}", 12, !Sub "${VPCSubnetMask}"]]
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-a"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateSubnetANACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PrivateNACL
      SubnetId:
        Ref: PrivateSubnetA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableA
      SubnetId:
        Ref: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        !Select [5, !Cidr [!Sub "${VPCCIDR}", 12, !Sub "${VPCSubnetMask}"]]
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-b"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateSubnetBNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PrivateNACL
      SubnetId:
        Ref: PrivateSubnetB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableB
      SubnetId:
        Ref: PrivateSubnetB

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        !Select [6, !Cidr [!Sub "${VPCCIDR}", 12, !Sub "${VPCSubnetMask}"]]
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-c"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateSubnetCNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PrivateNACL
      SubnetId:
        Ref: PrivateSubnetC

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableC
      SubnetId:
        Ref: PrivateSubnetC

  # Create Internet Gateway, NAT Gateway and EIPs

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-internet-gateway"
        - Key: env
          Value: 'dev'
    DependsOn:
      - VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  NATGatewayEIPA:
    Type: AWS::EC2::EIP
    Condition: IsNATAEnabled
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-c"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: IsNATAEnabled
    DependsOn:
      - NATGatewayEIPA
    Properties:
      AllocationId: !Sub "${NATGatewayEIPA.AllocationId}"
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-nat-gateway-a"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateDefaultRouteA:
    Type: AWS::EC2::Route
    Condition: IsNATAEnabled
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      NatGatewayId: !Ref NATGatewayA
      RouteTableId: !Ref PrivateRouteTableA

  NATGatewayEIPB:
    Type: AWS::EC2::EIP
    Condition: IsNATBEnabled
    Properties:
      Domain: vpc
      Tags:
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: IsNATBEnabled
    DependsOn:
      - NATGatewayEIPB
    Properties:
      AllocationId: !Sub "${NATGatewayEIPB.AllocationId}"
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-nat-gateway-b"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateDefaultRouteB:
    Type: AWS::EC2::Route
    Condition: IsNATBEnabled
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      NatGatewayId: !Ref NATGatewayB
      RouteTableId: !Ref PrivateRouteTableB

  PrivateDefaultRouteBAlt:
    Type: AWS::EC2::Route
    Condition: IsNATARouteableFromB
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      NatGatewayId: !Ref NATGatewayA
      RouteTableId: !Ref PrivateRouteTableB

  NATGatewayEIPC:
    Type: AWS::EC2::EIP
    Condition: IsNATCEnabled
    Properties:
      Domain: vpc
      Tags:
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Condition: IsNATCEnabled
    DependsOn:
      - NATGatewayEIPC
    Properties:
      AllocationId: !Sub "${NATGatewayEIPC.AllocationId}"
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-nat-gateway-c"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  # Create routes in route tables

  PrivateDefaultRouteC:
    Type: AWS::EC2::Route
    Condition: IsNATCEnabled
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      NatGatewayId: !Ref NATGatewayC
      RouteTableId: !Ref PrivateRouteTableC

  PrivateDefaultRouteCAlt:
    Type: AWS::EC2::Route
    Condition: IsNATARouteableFromC
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      NatGatewayId: !Ref NATGatewayA
      RouteTableId: !Ref PrivateRouteTableC

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-route-table-a"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PublicDefaultRouteA:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTableA

  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-route-table-b"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PublicDefaultRouteB:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTableB

  PublicRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-route-table-c"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PublicDefaultRouteC:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Sub ${RemoteAccessCIDR}
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTableC

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-route-table-a"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-route-table-b"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-route-table-c"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  # Enable VPC flow logs and create S3 bucket to store logs

  VPCFlowLogsS3BucketObject:
    Type: "AWS::S3::Bucket"
    Condition: EnableVPCFlowLogs
    Properties:
      BucketName: !Sub "${VPCFlowLogsS3Bucket}"
      Tags:
        - Key: Name
          Value: !Sub "${VPCFlowLogsS3Bucket}"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  FlowLog:
    Type: AWS::EC2::FlowLog
    Condition: EnableVPCFlowLogs
    Properties:
      LogDestination: !Sub "arn:aws:s3:::${VPCFlowLogsS3Bucket}/"
      LogDestinationType: !Ref VPCFlowLogsLogDestinationType
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: !Sub "${VPCFlowLogsS3Bucket}"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'
    DependsOn: VPCFlowLogsS3BucketObject

  # Create security group

  WebserverSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${Environment}-webserver-sg"
      GroupDescription: "Webserver Security Group"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-webserver-sg"
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  WebserverSGIngressTcp22:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "SSH Port"
      GroupId:
        Ref: WebserverSG
      IpProtocol: tcp
      FromPort: "22"
      ToPort: "22"
      CidrIp: !Sub "${RemoteAccessCIDR}"

  WebserverSGIngressTcp80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "HTTP Port"
      GroupId:
        Ref: WebserverSG
      IpProtocol: tcp
      FromPort: "80"
      ToPort: "80"
      CidrIp: !Sub "${RemoteAccessCIDR}"

  WebserverSGIngressTcp443:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "HTTP Port"
      GroupId:
        Ref: WebserverSG
      IpProtocol: tcp
      FromPort: "443"
      ToPort: "443"
      CidrIp: !Sub "${RemoteAccessCIDR}"

  # Create Key-pair

  WebServerKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: WebServerKeyPair
      Tags:
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  # Create ELB

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      Tags:
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'
    DependsOn:
      - AttachGateway

  # Create ASG

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
      - !Ref PrivateSubnetC
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
      Tags:
        - Key: VpcId
          PropagateAtLaunch: true
          Value: !Ref VPC
        - Key: env
          PropagateAtLaunch: true
          Value: 'dev'

  # Create ASG

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'DescribeHealthRole']
  DescribeHealthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: describe-instance-health-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DescribeInstanceHealth']
            Resource: '*'
      Tags:
        - Key: VpcId
          Value: !Ref VPC
        - Key: env
          Value: 'dev'

  # Create LaunchConfig

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_cfn
            - install_webserver
            - copy_s3_file
            - verify_instance_health
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource LaunchConfig ', '         --configsets
                    full_install ', '         --region ', !Ref 'AWS::Region', '

                    ', 'runas=root

                    ']]
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_webserver:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: |
                Hello world!
              mode: 000644
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
        copy_s3_file:
          commands:
            01_copy_file_from_s3_bucket:
              command: !Join
                - ''
                - - 'aws s3 cp '
                  - 's3://belong-coding-challenge/belong-test.html'
                  - '/var/www/html/index.html'
        verify_index_html:
          commands:
            check_index_html:
              command: !Join
                - ''
                - - 'curl'
                  - 'http://localhost'
        verify_instance_health:
          commands:
            ELBHealthCheck:
              command: !Join ['', ['until [ "$state" == "\"InService\"" ]; do ', '  state=$(aws
                    --region ', !Ref 'AWS::Region', ' elb describe-instance-health ',
                  '              --load-balancer-name ', !Ref 'ElasticLoadBalancer',
                  '              --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id) ',
                  '              --query InstanceStates[0].State); ', '  sleep 10; ',
                  done]]
    Properties:
      InstanceType: t2.micro
      ImageId: ami-018c0195987eb63ee
      KeyName: !Ref WebServerKeyPair
      SecurityGroups:
        - !Ref WebserverSG
      IamInstanceProfile: !Ref 'WebServerInstanceProfile'
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

            ', 'yum update -y aws-cfn-bootstrap

            ', '/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource LaunchConfig ', '         --configsets full_install ',
          '         --region ', !Ref 'AWS::Region', '

            ', '/opt/aws/bin/cfn-signal -e $? ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource WebServerGroup ', '         --region ', !Ref 'AWS::Region',
          '
            ']

# Outputs

Outputs:

  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub '${Environment}-vpc-id'
  VPCRegion:
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${Environment}-vpc-region'
  VPCCIDRBlock:
    Value: !Sub '${VPCCIDR}'
    Export:
      Name: !Sub '${Environment}-vpc-CIDR-block'
  PublicSubnetA:
    Value:
      Ref: PublicSubnetA
    Export:
      Name: !Sub '${Environment}-public-sn-a'
  PublicSubnetB:
    Value:
      Ref: PublicSubnetB
    Export:
      Name: !Sub '${Environment}-public-sn-b'
  PublicSubnetC:
    Value:
      Ref: PublicSubnetC
    Export:
      Name: !Sub '${Environment}-public-sn-c'
  PrivateSubnetA:
    Value:
      Ref: PrivateSubnetA
    Export:
      Name: !Sub '${Environment}-private-sn-a'
  PrivateSubnetB:
    Value:
      Ref: PrivateSubnetB
    Export:
      Name: !Sub '${Environment}-private-sn-b'
  PrivateSubnetC:
    Value:
      Ref: PrivateSubnetC
    Export:
      Name: !Sub '${Environment}-private-sn-c'
  PublicRouteTableA:
    Value:
      Ref: PublicRouteTableA
    Export:
      Name: !Sub '${Environment}-public-rt-a'
  PublicRouteTableB:
    Value:
      Ref: PublicRouteTableB
    Export:
      Name: !Sub '${Environment}-public-rt-b'
  PublicRouteTableC:
    Value:
      Ref: PublicRouteTableC
    Export:
      Name: !Sub '${Environment}-public-rt-c'
  PrivateRouteTableA:
    Value:
      Ref: PrivateRouteTableA
    Export:
      Name: !Sub '${Environment}-private-rt-a'
  PrivateRouteTableB:
    Value:
      Ref: PrivateRouteTableB
    Export:
      Name: !Sub '${Environment}-private-rt-b'
  PrivateRouteTableC:
    Value:
      Ref: PrivateRouteTableC
    Export:
      Name: !Sub '${Environment}-private-rt-c'
  VPCFlowLogsS3BucketName:
    Condition: EnableVPCFlowLogs
    Value:
      Ref: VPCFlowLogsS3BucketObject
    Export:
      Name: !Sub '${Environment}-VPC-Flowlogs-s3-bucket-name'
  NATGatewayEIPA:
    Condition: IsNATAEnabled
    Value:
      Ref: NATGatewayEIPA
    Export:
      Name: !Sub '${Environment}-NAT-gateway-elastic-IP-A'
  NATGatewayEIPB:
    Condition: IsNATBEnabled
    Value:
      Ref: NATGatewayEIPB
    Export:
      Name: !Sub '${Environment}-NAT-gateway-elastic-IP-B'
  NATGatewayEIPC:
    Condition: IsNATCEnabled
    Value:
      Ref: NATGatewayEIPC
    Export:
      Name: !Sub '${Environment}-NAT-gateway-elastic-IP-C'
